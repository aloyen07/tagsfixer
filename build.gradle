buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}


plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
    id "com.github.johnrengelman.shadow" version "8.1.1"
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        client {
            property "minecraft.api.auth.host", "https://nope.invalid"
            property "minecraft.api.account.host", "https://nope.invalid"
            property "minecraft.api.session.host", "https://nope.invalid"
            property "minecraft.api.services.host", "https://nope.invalid"
        }

        server {
            args '--nogui'
        }

        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    // MixinGradle Settings
    add sourceSets.main, 'tagsfixer.refmap.json'
    config 'tagsfixer.mixins.json'
}

repositories {
    flatDir {
        dirs "libs"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    implementation "io.github.llamalad7:mixinextras-common:0.3.6"

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
    annotationProcessor "io.github.llamalad7:mixinextras-common:0.3.6"
}

configurations {
    implementation {
        canBeResolved = true
    }
    specialImplementation
}

dependencies {
    specialImplementation "io.github.llamalad7:mixinextras-common:0.3.6"
}

reobf {
    shadowJar {}
}

shadowJar {

    mergeServiceFiles()

    archiveBaseName.set(mod_id + "-" + mod_version + "-all")
    archiveClassifier.set('')
    archiveVersion.set('')

    configurations = [project.configurations.specialImplementation]

    relocate "com.llamalad7.mixinextras", "ru.aloyenz.tagsfixer.shaded.mixinextras"

    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'Specification-Version'   : '1',
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs": "tagsfixer.mixins.json",
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true",
        ])
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs": "tagsfixer.mixins.json",
                "FMLCorePluginContainsFMLMod": "true",
                "ForceLoadAsMod": "true"
        ])
    }

    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.register("deobfJar", Jar) {
    from(sourceSets.main.output)
    archiveFileName = "${mod_id}-${version}-dev.jar"
}
